% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data-and-preprocessing.R
\name{dataSplit}
\alias{dataSplit}
\title{Splits data into training, validation, and test sets}
\usage{
dataSplit(
  X,
  y,
  stratified_by = NULL,
  train_prop = 0.6,
  valid_prop = 0.2,
  test_prop = 0.2
)
}
\arguments{
\item{X}{A data matrix or data frame.}

\item{y}{A response vector.}

\item{stratified_by}{An optional vector of group IDs to stratify by. That is,
the random paritioning occurs within each group so that the group
proportions are similar across the training, validation, and test sets.
Vector must be the same length as `y`. If \code{NULL} (default), the full
data set is randomly partitioned into training, validation, and test sets.}

\item{train_prop}{Proportion of data in training set. Default is 0.6.}

\item{valid_prop}{Proportion of data in validation set. Default is 0.2.}

\item{test_prop}{Proportion of data in test set. Default is 0.2.}
}
\value{
A list of two:
\describe{
\item{X}{A list of three data matrices or data frames named `train`,
  `validate`, and `test` containing the training, validation, and test X
  partitions, respectively.}
\item{y}{A list of three vectors named `train`, `validate`, and `test`
  containing the training, validation, and test y partitions, respectively.}
}
}
\description{
Given (X, y) data, splits the data into training, validation,
  and test partitions according to the specified proportions. Can also
  perform stratified (or clustered) data splitting if provided.
}
\examples{
# splits iris data into training (60\%), validation (20\%), and test (20\%) sets
data_split <- dataSplit(X = iris \%>\% dplyr::select(-Species),
                        y = iris$Species,
                        train_prop = 0.6, valid_prop = 0.2, test_prop = 0.2)

# splits iris data into training, validation, and test sets while keeping
# `Species` distribution constant across partitions
stratified_data_split <- dataSplit(X = iris \%>\% dplyr::select(-Species),
                                   y = iris$Species,
                                   stratified_by = iris$Species,
                                   train_prop = 0.6, valid_prop = 0.2,
                                   test_prop = 0.2)

}
